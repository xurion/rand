describe('Rand', function () {

  var uut;

  beforeEach(function () {

    uut = new Rand();

  });

  describe('str()', function () {

    it('returns a random alpha string 10 characters in length', function () {

      var expectedPattern = /\w+/,
        test1 = uut.str(),
        test2 = uut.str(),
        test3 = uut.str(),
        test4 = uut.str(),
        test5 = uut.str();

      expect(test1.match(expectedPattern).length).toBe(1)
      expect(test1.length).toBe(10)
      expect(test2.match(expectedPattern).length).toBe(1)
      expect(test2.length).toBe(10)
      expect(test3.match(expectedPattern).length).toBe(1)
      expect(test3.length).toBe(10)
      expect(test4.match(expectedPattern).length).toBe(1)
      expect(test4.length).toBe(10)
      expect(test5.match(expectedPattern).length).toBe(1)
      expect(test5.length).toBe(10)
    })

    it('returns random alpha strings that are different from each other (by chance)', function () {

      var test1 = uut.str(),
        test2 = uut.str()

      expect(test1).not.toBe(test2)
    })

    it('returns a random alpha string at a length of the given length argument', function () {

      var test1 = uut.str(1),
        test9 = uut.str(9),
        test11 = uut.str(11)

      expect(test1.length).toBe(1)
      expect(test9.length).toBe(9)
      expect(test11.length).toBe(11)

    })

    it('uses all alpha characters as possible characters in generated strings', function () {

      var test = uut.str(1000),
        charsUsed = new Set(test.match(/[a-z]/g))

      expect(charsUsed.size).toBe(26)
    })

  })

  describe('num()', function () {

    it('returns 1 when the number generated by Math.random is 0.0000001', function () {

      spyOn(Math, 'random').and.returnValue(0.0000001)

      expect(uut.num()).toBe(1)

    })

    it('returns 999,999 when the number generated by Math.random is greater then 9.9', function () {

      spyOn(Math, 'random').and.returnValue(0.99999999999999999)
      expect(uut.num()).toBe(999999)

    })

    it('returns a maximum number matching the given max argument', function () {

      spyOn(Math, 'random').and.returnValue(0.99999999999999999)
      expect(uut.num(3)).toBe(3)

    })

    it('returns a minimum number matching the given min argument', function () {

      spyOn(Math, 'random').and.returnValue(0.0000001)
      expect(uut.num(10, 5)).toBe(5)

    })

  })

})
